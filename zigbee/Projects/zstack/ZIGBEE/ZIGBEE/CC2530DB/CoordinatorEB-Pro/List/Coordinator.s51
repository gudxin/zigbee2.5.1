///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        01/Nov/2018  19:58:29 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\学习\论文\海洋\苏\源码                         /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\Source\Coordinator.c                           /
//    Command line       =  -f "H:\学习\论文\海洋\苏\源码                     /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg" /
//                           (-DCPU32MHZ -DROOT=__near_func                   /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg /
//                          " (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR   /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "H:\学习\论文\海洋\苏\源码 /
//                           (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIG /
//                          BEE\Source\Coordinator.c" -D ZIGBEEPRO -D         /
//                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D REFECTOR  /
//                          -D xMT_ZDO_FUNC -D NV_INT -D NV_RESTORE -lC       /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\CoordinatorEB-Pro\List\" -lA          /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\CoordinatorEB-Pro\List\"              /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\CoordinatorEB-Pro\Obj\" -e --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\" -I "H:\学习\论文\海洋\苏\源码       /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\SOURCE\" -I                        /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I          /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I     /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE /
//                          \" -I "H:\学习\论文\海洋\苏\源码                  /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\ /
//                          CC2530EB\" -I "H:\学习\论文\海洋\苏\源码          /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CC /
//                          SOC\" -I "H:\学习\论文\海洋\苏\源码               /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUD /
//                          E\" -I "H:\学习\论文\海洋\苏\源码                 /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"  /
//                          -I "H:\学习\论文\海洋\苏\源码                     /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" /
//                           -I "H:\学习\论文\海洋\苏\源码                    /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" /
//                           -I "H:\学习\论文\海洋\苏\源码                    /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ /
//                          " -I "H:\学习\论文\海洋\苏\源码                   /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" /
//                           -I "H:\学习\论文\海洋\苏\源码                    /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" /
//                           -I "H:\学习\论文\海洋\苏\源码                    /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"  /
//                          -I "H:\学习\论文\海洋\苏\源码                     /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I   /
//                          "H:\学习\论文\海洋\苏\源码                        /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SA /
//                          DDR\" -I "H:\学习\论文\海洋\苏\源码               /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SD /
//                          ATA\" -I "H:\学习\论文\海洋\苏\源码               /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE /
//                          \" -I "H:\学习\论文\海洋\苏\源码                  /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LE /
//                          VEL\" -I "H:\学习\论文\海洋\苏\源码               /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV /
//                          EL\srf04\" -I "H:\学习\论文\海洋\苏\源码          /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV /
//                          EL\srf04\SINGLE_CHIP\" -Ohz --require_prototypes  /
//    List file          =  H:\学习\论文\海洋\苏\源码                         /
//                          (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\CC2530DB\CoordinatorEB-Pro\List\Coordinator.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Coord_UartInit?relay
        FUNCTION ??Coord_UartInit?relay,0203H
        PUBLIC ??Delay_MS?relay
        FUNCTION ??Delay_MS?relay,0203H
        PUBLIC ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??callback?relay
        FUNCTION ??callback?relay,0203H
        PUBLIC Coord_UartInit
        FUNCTION Coord_UartInit,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC Delay_MS
        FUNCTION Delay_MS,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Delay_ms
        FUNCTION Delay_ms,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC `a`
        PUBLIC afRxData
        PUBLIC callback
        FUNCTION callback,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC cmd
        PUBLIC count
        PUBLIC linked
        PUBLIC send
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalUARTRead         SYMBOL "HalUARTRead"
strncmp             SYMBOL "strncmp"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_memset         SYMBOL "osal_memset"
HalUARTOpen         SYMBOL "HalUARTOpen"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??strncmp?relay     SYMBOL "?relay", strncmp
Coord_UartInit      SYMBOL "Coord_UartInit"
??Coord_UartInit?relay SYMBOL "?relay", Coord_UartInit
Delay_MS            SYMBOL "Delay_MS"
??Delay_MS?relay    SYMBOL "?relay", Delay_MS
Delay_ms            SYMBOL "Delay_ms"
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
callback            SYMBOL "callback"
??callback?relay    SYMBOL "?relay", callback

        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strncmp
        FUNCTION strncmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??strncmp?relay
        FUNCTION ??strncmp?relay,00H

// H:\学习\论文\海洋\苏\源码 (2)\下位机\下位机工程\Projects\zstack\ZIGBEE\ZIGBEE\Source\Coordinator.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "ZGlobals.h"
//    6 #include "AF.h"
//    7 #include "aps_groups.h"
//    8 #include "ZDApp.h"
//    9 
//   10 #include "SampleApp.h"
//   11 #include "SampleAppHw.h"
//   12 
//   13 #include "OnBoard.h"
//   14 
//   15 /* HAL */
//   16 #include "hal_lcd.h"
//   17 #include "hal_led.h"
//   18 #include "hal_key.h"
//   19 #include "MT_UART.h"
//   20 #include "MT_APP.h"
//   21 #include "MT.h"
//   22 #include "stdlib.h"
//   23 #include "string.h"
//   24 //#include "DHT11.h"
//   25 #include <stdio.h>
//   26 
//   27 /*********************************************************************
//   28  * CONSTANTS
//   29  */
//   30 
//   31 /*********************************************************************
//   32  * TYPEDEFS
//   33  */
//   34 
//   35 /*********************************************************************
//   36  * GLOBAL VARIABLES
//   37  */
//   38 typedef unsigned int  uint;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   39 uint8 count=0;
count:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 uint8 cmd;
cmd:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 uint8 send[10];
send:
        DS 10
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   42 uint8 linked = 0;
linked:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 unsigned char a[80];
`a`:
        DS 80
        REQUIRE __INIT_XDATA_Z
//   44 
//   45 
//   46 void Coord_UartInit(void);
//   47 void Delay_MS(uint x);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   48 void Delay_MS(uint x)
Delay_MS:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_MS
        CODE
//   49 {
        FUNCALL Delay_MS, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   50   uint i,j;
//   51   for(i=0;i<x;i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??Delay_MS_0
//   52   MicroWait(1000);
??Delay_MS_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Onboard_wait?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??Delay_MS_0:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,?V0 + 1
        JC      ??Delay_MS_1
        CFI EndBlock cfiBlock0
//   53 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   54 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   55 const cId_t SampleApp_ClusterList[ENDDEVICE_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DW 1
//   56 {
//   57   ENDDEVIC1_MSG //Modified by user,区分每个终端的簇列表，第x个终端，则更改为ENDDEVICx_MSG
//   58 }; 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   59 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW SampleApp_ClusterList
//   60 {
//   61   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   62   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   63   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   64   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   65   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   66   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   67   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   68   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   69   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   70 };
//   71 
//   72 // This is the Endpoint/Interface description.  It is defined here, but
//   73 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   74 // in the structure here and make it a "const" (in code space).  The
//   75 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL VARIABLES
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * EXTERNAL FUNCTIONS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * LOCAL VARIABLES
//   88  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   90                           // This variable will be received when
//   91                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   93 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   95 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 afAddrType_t SampleApp_Periodic_DstAddr; //广播
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 afAddrType_t SampleApp_Flash_DstAddr;    //组播
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 afAddrType_t SampleApp_P2P_DstAddr;      //点播
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   99 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  104 uint8 afRxData[4]={0};
afRxData:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  105 /*********************************************************************
//  106  * LOCAL FUNCTIONS
//  107  */
//  108 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  109 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  110 //void Delay_10us(void);
//  111 //void Delay_ms(uint16 Time);
//  112 void callback(uint8 port, uint8 event);
//  113 void Delay_ms(unsigned int ms);
//  114 /*********************************************************************
//  115  * NETWORK LAYER CALLBACKS
//  116  */
//  117 
//  118 /*********************************************************************
//  119  * PUBLIC FUNCTIONS
//  120  */
//  121 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  122 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  123 { 
        FUNCALL SampleApp_Init, Coord_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  124   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  125   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  126   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  127   Coord_UartInit();                  //串口初始化
        ; Setup parameters for call to function Coord_UartInit
        LCALL   ??Coord_UartInit?relay
//  128   MT_UartRegisterTaskID(task_id); //注册串口任务
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  129  
//  130  
//  131   // Device hardware initialization can be added here or in main() (Zmain.c).
//  132   // If the hardware is application specific - add it here.
//  133   // If the hardware is other parts of the device add it in main().
//  134 
//  135  #if defined ( BUILD_ALL_DEVICES )
//  136   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  137   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  138   // together - if they are - we will start up a coordinator. Otherwise,
//  139   // the device will start as a router.
//  140   if ( readCoordinatorJumper() )
//  141     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  142   else
//  143     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  144 #endif // BUILD_ALL_DEVICES
//  145 
//  146 #if defined ( HOLD_AUTO_START )
//  147   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  148   //  from starting the device and wait for the application to
//  149   //  start the device.
//  150   ZDOInitDevice(0);
//  151 #endif
//  152 
//  153   // Setup for the periodic message's destination address
//  154   // Broadcast to everyone
//  155   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  156   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  157   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  158 
//  159   
//  160   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //点播 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  161   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  162   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //发给协调器
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  163 
//  164   // Fill out the endpoint description.
//  165   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  166   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  167   SampleApp_epDesc.simpleDesc
//  168             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  169   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  170 
//  171   // Register the endpoint description with the AF
//  172   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  173 
//  174   // Register for all key events - This app will handle all key events
//  175   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  176 
//  177   // By default, all devices start out in Group 1
//  178   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  179   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  180   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  181   
//  182   
//  183   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  184   HalUARTWrite(0, "AT+CIPMUX=1\r\n", 13);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
//  185   Delay_ms(200);
//  186   HalUARTWrite(0, "AT+CIPSERVER=1,8080\r\n", 21);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSERVER=1,8080\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSERVER=1,8080\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
//  187   Delay_ms(200);
//  188  
//  189 #if defined ( LCD_SUPPORTED )
//  190   
//  191 #endif
//  192 }
??CrossCallReturnLabel_1:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function Delay_ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??Delay_ms?relay
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  193 
//  194 /*********************************************************************
//  195  * @fn      SampleApp_ProcessEvent
//  196  *
//  197  * @brief   Generic Application Task event processor.  This function
//  198  *          is called to process all events for the task.  Events
//  199  *          include timers, messages and any other user defined events.
//  200  *
//  201  * @param   task_id  - The OSAL assigned task ID.
//  202  * @param   events - events to process.  This is a bit map and can
//  203  *                   contain more than one event.
//  204  *
//  205  * @return  none
//  206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  208 { 
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  209   
//  210   afIncomingMSGPacket_t *MSGpkt;
//  211   (void)task_id;  // Intentionally unreferenced parameter
//  212  
//  213   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  214   {
//  215     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  216     while ( MSGpkt )
//  217     {
//  218       switch ( MSGpkt->hdr.event )
//  219       {
//  220         // Received when a key is pressed
//  221         case KEY_CHANGE:
//  222           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  223           break;
//  224 
//  225         // Received when a messages is received (OTA) for this endpoint
//  226         case AF_INCOMING_MSG_CMD:
//  227           SampleApp_MessageMSGCB( MSGpkt );
//  228           break;
//  229 
//  230         // Received whenever the device changes state in the network
//  231         case ZDO_STATE_CHANGE:
//  232           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  233           if ( (SampleApp_NwkState == DEV_ZB_COORD) )
//  234           {
//  235             
//  236           }
//  237           break;
//  238         default:
//  239           break;
//  240       }
//  241 
//  242       // Release the memory
//  243       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  244 
//  245       // Next - if one is available
//  246       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??SampleApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_3
//  247     }
//  248 
//  249     // return unprocessed events
//  250     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_6
//  251   }
//  252 
//  253   // Discard unknown events4即
//  254   return 0;
??SampleApp_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  255 }
//  256 
//  257 /*********************************************************************
//  258  * Event Generation Functions
//  259  */
//  260 /*********************************************************************
//  261  * @fn      SampleApp_HandleKeys
//  262  *
//  263  * @brief   Handles all key events for this device.
//  264  *
//  265  * @param   shift - true if in shift/alt.
//  266  * @param   keys - bit field for key events. Valid entries:
//  267  *                 HAL_KEY_SW_2
//  268  *                 HAL_KEY_SW_1
//  269  *
//  270  * @return  none
//  271  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  273 {
        ; Saved register size: 0
        ; Auto size: 0
//  274  (void)shift;  // Intentionally unreferenced parameter
//  275  if ( keys & HAL_KEY_SW_6 )
//  276   {
//  277    
//  278   }
//  279 
//  280   if ( keys & HAL_KEY_SW_1 )
//  281   {
//  282   } 
//  283 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  284 
//  285 /*********************************************************************
//  286  * LOCAL FUNCTIONS
//  287  */
//  288 
//  289 /*********************************************************************
//  290  * @fn      SampleApp_MessageMSGCB
//  291  *
//  292  * @brief   Data message processor callback.  This function processes
//  293  *          any incoming data - probably from other devices.  So, based
//  294  *          on cluster ID, perform the intended action.
//  295  *
//  296  * @param   none
//  297  *
//  298  * @return  none
//  299  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  300 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  301 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, Delay_MS
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  302   uint16 flashTime;
//  303 
//  304   uint8 i;
//  305   for (i=0;i<3;i++)
        MOV     R5,#0x0
//  306     afRxData[i] = pkt->cmd.Data[i];
??SampleApp_MessageMSGCB_0:
        MOV     DPL,R5
        MOV     R0,DPL
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R4
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,#afRxData & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(afRxData >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x3
        JC      ??SampleApp_MessageMSGCB_0
//  307   HalUARTWrite(0, "AT+CIPSEND=0,3\r\n", 15);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND=0,3\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND=0,3\\r\\n">` >> 8) & 0xff
        LCALL   ??HalUARTWrite?relay
//  308   Delay_MS(10);
        ; Setup parameters for call to function Delay_MS
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Delay_MS?relay
//  309   HalUARTWrite(0,  afRxData, 3); //输出接收到的数据	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#afRxData & 0xff
        MOV     R3,#(afRxData >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        CFI EndBlock cfiBlock8
//  310   
//  311 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  312 /*********************************************************************
//  313  * @fn      SampleApp_SendPeriodicMessage
//  314  *
//  315  * @brief   Send the periodic message.
//  316  *
//  317  * @param   none
//  318  *
//  319  * @return  none
//  320  */
//  321 
//  322 
//  323 
//  324 /*********************************************************************
//  325  * @fn      SampleApp_Send_P2P_Message
//  326  *
//  327  * @brief   point to point.
//  328  *
//  329  * @param   none
//  330  *
//  331  * @return  none
//  332  */
//  333 
//  334 //以下为协调器显示wifi模块的调试信息，可用可不用
//  335 /*********************************************************************
//  336 *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  337 void callback(uint8 port, uint8 event)
callback:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function callback
        CODE
//  338 {
        FUNCALL callback, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL callback, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R6,A
//  339  unsigned char a1[17];  //将接收的数据分为四个16字节大小的数组，在lcd四行显示
//  340  unsigned char a2[17]; unsigned char a3[17];
//  341  unsigned char a4[17];
//  342  unsigned char a5[]="  +IPD"; //判断是否为wifi模块收到数据并串口发送给zigbee
//  343  unsigned char a6[]="  +IPD,0,4:"; //判断是否为wifi模块收到数据并串口发送给zigbee
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "  +IPD,0,4:">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "  +IPD,0,4:">` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  344  unsigned char a7[]="Link"; //判断是否为wifi模块收到数据并串口发送给zigbee
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Link">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "Link">` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  345  unsigned char a8[]="Unlink"; //判断是否为wifi模块收到数据并串口发送给zigbee
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Unlink">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "Unlink">` & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  346  unsigned char i=0;           //循环标志
//  347  unsigned char j=0;           //循环标志
//  348  unsigned char k=0;           //实际有效数据起始标志位
//  349  unsigned char temp[50];      //提取出的有效数据暂存数组
//  350  uint8 n=0;
//  351  if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))) 
        MOV     A,#0x7
        ANL     A,R6
        JNZ     $+5
        LJMP    ??callback_0 & 0xFFFF
//  352  {  //必须要判断event，此处确保字执行串口回调函数之前，dma已经把串口缓存区的数据完全读到
//  353   HalUARTRead(0, a, 80); //从dma缓冲区读取数据
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#`a` & 0xff
        MOV     R3,#(`a` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  354  
//  355    for(i=0;i<80;i++)      //将数据内的换行回车以空格代替，便于显示
        MOV     R0,#0x0
//  356    {
//  357      if(a[i]==0x0A||a[i]==0x0D) a[i]=' ';
??callback_1:
        MOV     ?V0 + 0,R0
        MOV     A,#`a` & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(`a` >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xa
        XRL     A,R1
        JZ      ??callback_2
        MOV     A,#0xd
        XRL     A,R1
        JNZ     ??callback_3
??callback_2:
        MOV     A,#0x20
        MOVX    @DPTR,A
//  358    }
??callback_3:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x50
        JC      ??callback_1
//  359    if((strncmp(a8,a,6))==0)
        ; Setup parameters for call to function strncmp
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`a` & 0xff
        MOV     R5,#(`a` >> 8) & 0xff
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strncmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??callback_4
//  360    {
//  361       Delay_MS(100);
        ; Setup parameters for call to function Delay_MS
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Delay_MS?relay
//  362        linked = 0;
        MOV     DPTR,#linked
        CLR     A
??callback_5:
        MOVX    @DPTR,A
        LJMP    ??callback_6 & 0xFFFF
//  363       
//  364    }
//  365    else  if((strncmp(a7,a,4))==0)
??callback_4:
        ; Setup parameters for call to function strncmp
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`a` & 0xff
        MOV     R5,#(`a` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strncmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??callback_7
//  366    {
//  367        Delay_MS(100);
        ; Setup parameters for call to function Delay_MS
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Delay_MS?relay
//  368        linked = 1;
        MOV     DPTR,#linked
        MOV     A,#0x1
        SJMP    ??callback_5
//  369    }
//  370    else if ((strncmp(a6,a,7))==0) //比较数据头，拦截一种wifi转发给zigbee的控制指令
??callback_7:
        ; Setup parameters for call to function strncmp
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`a` & 0xff
        MOV     R5,#(`a` >> 8) & 0xff
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strncmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??callback_6
//  371    {   
//  372        for(j=0;j<4;j++)
        MOV     R2,#0x0
//  373        {
//  374          send[j] = a[11+j];
??callback_8:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#(`a` + 11) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((`a` + 11) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(send >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  375        }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x4
        JC      ??callback_8
//  376        AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  377                        ENDDEVIC1_MSG,
//  378                        4,
//  379                        send,
//  380                        &SampleApp_TransID,
//  381                        AF_DISCV_ROUTE,
//  382                        AF_DEFAULT_RADIUS );  
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#send & 0xff
        MOV     ?V0 + 1,#(send >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  383    
//  384    }   
//  385    
//  386    osal_memset(a, 0, 80); //清空a，为下次数据接收准备
??callback_6:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#`a` & 0xff
        MOV     R3,#(`a` >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  387  } 
//  388 }
??callback_0:
        MOV     A,#0x18
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  389 /***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 void Coord_UartInit ()
Coord_UartInit:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function Coord_UartInit
        CODE
//  391 {
        FUNCALL Coord_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  392   halUARTCfg_t uartConfig;
//  393 
//  394   /* Initialize APP ID */
//  395   //App_TaskID = 0;
//  396 
//  397   /* UART Configuration */
//  398   uartConfig.configured           = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  399   uartConfig.baudRate             = HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  400   uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  401   uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  402   uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  403   uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  404   uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  405   uartConfig.intEnable            = TRUE;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  406 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  407   uartConfig.callBackFunc         = callback;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??callback?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??callback?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  408 #elif defined (ZAPP_P1) || defined (ZAPP_P2)
//  409   uartConfig.callBackFunc         = callback;
//  410 #else
//  411   uartConfig.callBackFunc         = callback;
//  412 #endif
//  413 
//  414   /* Start UART */
//  415 #if defined (MT_UART_DEFAULT_PORT)
//  416   HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  417 #else
//  418   /* Silence IAR compiler warning */
//  419   (void)uartConfig;
//  420 #endif
//  421 
//  422   /* Initialize for ZApp */
//  423 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  424   /* Default max bytes that ZAPP can take */
//  425   MT_UartMaxZAppBufLen  = 1;
//  426   MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
//  427 #endif
//  428 
//  429 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock11
//  430 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 void Delay_ms(unsigned int ms)
Delay_ms:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Delay_ms
        CODE
//  432 {
        FUNCALL Delay_ms, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??Delay_ms_0
//  433   unsigned int i;
//  434   while(ms != 0)
//  435   {  
//  436    MicroWait(1000);  
??Delay_ms_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Onboard_wait?relay
//  437     ms--;  
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
??Delay_ms_0:
        MOV     R7,A
//  438   }     
        MOV     A,R6
        ORL     A,R7
        JNZ     ??Delay_ms_1
//  439 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_MS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_MS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??callback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    callback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Coord_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Coord_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_ms

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=1\\r\\n">`:
        DB "AT+CIPMUX=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSERVER=1,8080\\r\\n">`:
        DB "AT+CIPSERVER=1,8080\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND=0,3\\r\\n">`:
        DB "AT+CIPSEND=0,3\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "  +IPD,0,4:">`:
        DB "  +IPD,0,4:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Link">`:
        DB "Link"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Unlink">`:
        DB "Unlink"

        END
// 
// 988 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//  99 bytes in segment XDATA_ROM_C
// 162 bytes in segment XDATA_Z
// 
// 1 036 bytes of CODE  memory
//    99 bytes of CONST memory
//   162 bytes of XDATA memory
//
//Errors: none
//Warnings: 17
