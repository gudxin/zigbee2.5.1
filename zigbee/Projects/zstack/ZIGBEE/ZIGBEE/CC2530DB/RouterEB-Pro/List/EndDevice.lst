###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         15/Apr/2015  08:08:08 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\Source\EndDevice.c        #
#    Command line       =  -f E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶ #
#                          Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wRouter.cfg (-DCPU32MHZ               #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\Source\EndDevice.c -D     #
#                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC    #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Lis #
#                          t\ -lA E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2 #
#                          .ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\RouterEB- #
#                          Pro\List\ --diag_suppress Pe001,Pa010 -o           #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj #
#                          \ -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶ #
#                          Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\ -I           #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I    #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹ #
#                          ¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½ #
#                          Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä #
#                          ½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä #
#                          ½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½ #
#                          Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#                          --require_prototypes                               #
#    List file          =  E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Lis #
#                          t\EndDevice.lst                                    #
#    Object file        =  E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½Ó #
#                          ÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj #
#                          \EndDevice.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\zigbee¿ª·¢°åv4\´úÂë¼°Æä½Ì³Ì\6.×ÔÖÆ¹¤³Ì\2.ÖÕ¶Ë½ÓÊÕÐ­µ÷µ¥²¥ÏûÏ¢\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndDevice.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          **************************************************************************************************/
      9          
     10          #include "OSAL.h"
     11          #include "ZGlobals.h"
     12          #include "AF.h"
     13          #include "aps_groups.h"
     14          #include "ZDApp.h"
     15          #include <string.h>
     16          #include <stdio.h>
     17          #include "SampleApp.h"
     18          #include "SampleAppHw.h"
     19          
     20          #include "OnBoard.h"
     21          
     22          /* HAL */
     23          #include "hal_lcd.h"
     24          #include "hal_led.h"
     25          #include "hal_key.h"
     26          #include "MT_UART.h"
     27          #include "MT_APP.h"
     28          #include "MT.h"
     29          
     30          
     31          
     32          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     33          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0400         DW 4
   \   000002   0700         DW 7
   \   000004   0000         DW 0
     34          {
     35            SAMPLEAPP_P2P_CLUSTERID,
     36            GET_ENDDEVIC_ADDRES_RESP
     37          };
     38          

   \                                 In  segment XDATA_ROM_C, align 1
     39          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
     40          {
     41            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     42            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     43            SAMPLEAPP_DEVICEID,              //  uint16 AppDevVer:4;
     44            SAMPLEAPP_FLAGS,                 //  int  pDeviceId[2];
     45            SAMPLEAPP_DEVICE_VERSION,        //  int   Ap AppFlags:4;
     46            SAMPLEAPP_MAX_CLUSTERS,          //  uint  8  AppNumInClusters;
     47            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     48            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     49            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     50          };
     51          
     52          // This is the Endpoint/Interface description.  It is defined here, but
     53          // filled-in in SampleApp_Init().  Another way to go would be to fill
     54          // in the structure here and make it a "const" (in code space).  The
     55          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     57          
     58          /*********************************************************************
     59           * EXTERNAL VARIABLES
     60           */
     61          
     62          /*********************************************************************
     63           * EXTERNAL FUNCTIONS
     64           */
     65          
     66          /*********************************************************************
     67           * LOCAL VARIABLES
     68           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70                                    // This variable will be received when
     71                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     75          
     76          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     78          
     79          
     80          /*********************************************************************
     81           * LOCAL FUNCTIONS
     82           */
     83          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
     84          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     85          void SampleApp_Send_P2P_Message(void);
     86          /*********************************************************************
     87           * NETWORK LAYER CALLBACKS
     88           */
     89          
     90          /*********************************************************************
     91           * PUBLIC FUNCTIONS
     92           */
     93          
     94          /*********************************************************************
     95           * @fn      SampleApp_Init
     96           *
     97           * @brief   Initialization function for the Generic App Task.
     98           *          This is called during initialization and should contain
     99           *          any application specific initialization (ie. hardware
    100           *          initialization/setup, table initialization, power up
    101           *          notificaiton ... ).
    102           *
    103           * @param   task_id - the ID assigned by OSAL.  This ID should be
    104           *                    used to send messages and set timers.
    105           *
    106           * @return  none
    107           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    109          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    110            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    111            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    112            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    113            
    114            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    115            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    116            
    117            // Device hardware initialization can be added here or in main() (Zmain.c).
    118            // If the hardware is application specific - add it here.
    119            // If the hardware is other parts of the device add it in main().
    120          
    121           #if defined ( BUILD_ALL_DEVICES )
    122            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    123            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    124            // together - if they are - we will start up a coordinator. Otherwise,
    125            // the device will start as a router.
    126            if ( readCoordinatorJumper() )
    127              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    128            else
    129              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    130          #endif // BUILD_ALL_DEVICES
    131          
    132          #if defined ( HOLD_AUTO_START )
    133            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    134            //  from starting the device and wait for the application to
    135            //  start the device.
    136            ZDOInitDevice(0);
    137          #endif
    138           
    139            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   00001E   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    140            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    141            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000028   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    142          
    143            // Fill out the endpoint description.
    144            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002F   90....       MOV     DPTR,#SampleApp_epDesc
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    145            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    146            SampleApp_epDesc.simpleDesc
    147                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    148            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000045   A3           INC     DPTR
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    149          
    150            // Register the endpoint description with the AF
    151            afRegister( &SampleApp_epDesc );
   \   000048                ; Setup parameters for call to function afRegister
   \   000048   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00004A   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00004C   12....       LCALL   ??afRegister?relay
    152          
    153            // Register for all key events - This app will handle all key events
    154            RegisterForKeys( SampleApp_TaskID );
   \   00004F                ; Setup parameters for call to function RegisterForKeys
   \   00004F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??RegisterForKeys?relay
    155          
    156            // By default, all devices start out in Group 1
    157           
    158          }
   \   000057   7F01         MOV     R7,#0x1
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
    159          
    160          /*********************************************************************
    161           * @fn      SampleApp_ProcessEvent
    162           *
    163           * @brief   Generic Application Task event processor.  This function
    164           *          is called to process all events for the task.  Events
    165           *          include timers, messages and any other user defined events.
    166           *
    167           * @param   task_id  - The OSAL assigned task ID.
    168           * @param   events - events to process.  This is a bit map and can
    169           *                   contain more than one event.
    170           *
    171           * @return  none
    172           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    174          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    175            afIncomingMSGPacket_t *MSGpkt;
    176            (void)task_id;  // Intentionally unreferenced parameter
    177          
    178            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6044         JZ      ??SampleApp_ProcessEvent_0
    179            {
    180              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??SampleApp_ProcessEvent_1
    181              while ( MSGpkt )
    182              {
    183                switch ( MSGpkt->hdr.event )
    184                {
    185                  // Received when a key is pressed
    186                  case KEY_CHANGE:
    187                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    188                    break;
    189          
    190                  // Received when a messages is received (OTA) for this endpoint
    191                  case AF_INCOMING_MSG_CMD:
    192                    SampleApp_MessageMSGCB( MSGpkt );
    193                    break;
    194          
    195                  // Received whenever the device changes state in the network
    196                  case ZDO_STATE_CHANGE:
    197                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    198                    if ( (SampleApp_NwkState == DEV_ZB_COORD) ||
    199                           (SampleApp_NwkState == DEV_ROUTER)
    200                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    201                    {
    202                      // Start sending the periodic message in a regular interval.
    203                     
    204                    }
    205                    else
    206                    {
    207                      // Device is no longer in the network
    208                    }
    209                    break;
    210          
    211                  default:
    212                    break;
    213                }
    214          
    215                // Release the memory
    216                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    217          
    218                // Next - if one is available
    219                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   6018         JZ      ??SampleApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   6006         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   2449         ADD     A,#0x49
   \   00003C   60D2         JZ      ??SampleApp_ProcessEvent_2
   \   00003E   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000040                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000047   80CD         SJMP    ??SampleApp_ProcessEvent_3
    220              }
    221          
    222              // return unprocessed events
    223              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6480         XRL     A,#0x80
   \   00004F   FB           MOV     R3,A
   \   000050   800C         SJMP    ??SampleApp_ProcessEvent_6
    224            }
    225          
    226            if ( events & SAMPLEAPP_SEND_SELF_ADDR )
   \                     ??SampleApp_ProcessEvent_0:
   \   000052   EA           MOV     A,R2
   \   000053   5406         ANL     A,#0x6
   \   000055   6003         JZ      ??SampleApp_ProcessEvent_7
    227              {
    228                SampleApp_Send_P2P_Message();
   \   000057                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000057   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    229              }
    230            return 0;
   \                     ??SampleApp_ProcessEvent_7:
   \   00005A   7A00         MOV     R2,#0x0
   \   00005C   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_6:
   \   00005E                REQUIRE ?Subroutine0
   \   00005E                ; // Fall through to label ?Subroutine0
    231          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    232          
    233          /*********************************************************************
    234           * Event Generation Functions
    235           */
    236          /*********************************************************************
    237           * @fn      SampleApp_HandleKeys
    238           *
    239           * @brief   Handles all key events for this device.
    240           *
    241           * @param   shift - true if in shift/alt.
    242           * @param   keys - bit field for key events. Valid entries:
    243           *                 HAL_KEY_SW_2
    244           *                 HAL_KEY_SW_1
    245           *
    246           * @return  none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    249          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    250            (void)shift;  // Intentionally unreferenced parameter
    251            
    252            if ( keys & HAL_KEY_SW_1 )
    253            {
    254          
    255            }
    256          
    257            
    258          }
   \   000000   02....       LJMP    ?BRET
    259          
    260          /*********************************************************************
    261           * LOCAL FUNCTIONS
    262           */
    263          
    264          /*********************************************************************
    265           * @fn      SampleApp_MessageMSGCB
    266           *
    267           * @brief   Data message processor callback.  This function processes
    268           *          any incoming data - probably from other devices.  So, based
    269           *          on cluster ID, perform the intended action.
    270           *
    271           * @param   none
    272           *
    273           * @return  none
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    276          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    277            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0400         DW        4
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    278            {
    279              case SAMPLEAPP_P2P_CLUSTERID:
    280                    HalUARTWrite(0, "Rx:", 3);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C03         MOV     R4,#0x3
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A..         MOV     R2,#`?<Constant "Rx:">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "Rx:">` >> 8) & 0xff
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
    281                    HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   EE           MOV     A,R6
   \   000034   241F         ADD     A,#0x1f
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   EE           MOV     A,R6
   \   000043   2421         ADD     A,#0x21
   \   000045   F582         MOV     DPL,A
   \   000047   EF           MOV     A,R7
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FB           MOV     R3,A
   \   000051   7900         MOV     R1,#0x0
   \   000053   12....       LCALL   ??HalUARTWrite?relay
    282                    HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
   \   000056                ; Setup parameters for call to function HalUARTWrite
   \   000056   7C01         MOV     R4,#0x1
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00005C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   ??HalUARTWrite?relay
    283                break;  
   \   000063   800C         SJMP    ??SampleApp_MessageMSGCB_0
    284              case GET_ENDDEVIC_ADDRES:
    285                
    286                osal_set_event( SampleApp_TaskID, SAMPLEAPP_SEND_SELF_ADDR);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000065                ; Setup parameters for call to function osal_set_event
   \   000065   7A06         MOV     R2,#0x6
   \   000067   7B00         MOV     R3,#0x0
   \   000069   90....       MOV     DPTR,#SampleApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??osal_set_event?relay
    287                break;      
    288            }
    289          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000071   7F02         MOV     R7,#0x2
   \   000073   02....       LJMP    ?BANKED_LEAVE_XDATA
    290          
    291          /*********************************************************************
    292           * @fn      SampleApp_Send_P2P_Message
    293           *
    294           * @brief   point to point.
    295           *
    296           * @param   none
    297           *
    298           * @return  none
    299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    301          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    302            char data[15];
    303            int16 Temp_nwkAddr;
    304            int16 Temp_parentNwkAddr;
    305            Temp_nwkAddr = NLME_GetShortAddr();
   \   00000A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000A   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
    306            Temp_parentNwkAddr = NLME_GetCoordShortAddr();//ÉÏÒ»¼¶¸¸Ç×½Úµã£¬²»ÐèÒªÊÇÐ­µ÷Æ÷
    307            HalLcdWriteStringValue( "Father:", Temp_parentNwkAddr, 16, HAL_LCD_LINE_3 );
   \   000013                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000013   75..03       MOV     ?V0 + 2,#0x3
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001B                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00001B   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   7410         MOV     A,#0x10
   \   000024   F9           MOV     R1,A
   \   000025   7A..         MOV     R2,#`?<Constant "Father:">` & 0xff
   \   000027   7B..         MOV     R3,#(`?<Constant "Father:">` >> 8) & 0xff
   \   000029   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
    308            sprintf(data, "self:%x\r\n", Temp_nwkAddr);//ÖÆ¶¨½øÖÆµÄµÄÊýÖµ×ª»¯Îª×Ö·û´®£¨ÃæÖµ×ª»»£©
   \   000031                ; Setup parameters for call to function sprintf
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7C..         MOV     R4,#`?<Constant "self:%x\\r\\n">` & 0xff
   \   000038   7D..         MOV     R5,#(`?<Constant "self:%x\\r\\n">` >> 8) & 0xff
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   AA82         MOV     R2,DPL
   \   000041   AB83         MOV     R3,DPH
   \   000043   12....       LCALL   ??sprintf?relay
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    309                                                       //   0xff->%d->"ff"******0xff->%x->"256"
    310            HalUARTWrite (0, (uint8*)data, strlen(data));
   \   00004B                ; Setup parameters for call to function HalUARTWrite
   \   00004B                ; Setup parameters for call to function strlen
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??strlen?relay
   \   000058   EA           MOV     A,R2
   \   000059   FC           MOV     R4,A
   \   00005A   EB           MOV     A,R3
   \   00005B   FD           MOV     R5,A
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   7900         MOV     R1,#0x0
   \   000068   12....       LCALL   ??HalUARTWrite?relay
    311            data[0] = HI_UINT16( Temp_nwkAddr );       //½«16²ðÊý¾Ý³ÉÁ½¸ö°ËÎ»Êý¾Ý
   \   00006B   85....       MOV     ?V0 + 2,?V0 + 0
   \   00006E   7408         MOV     A,#0x8
   \   000070   78..         MOV     R0,#?V0 + 2
   \   000072   12....       LCALL   ?SS_SHR
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   E5..         MOV     A,?V0 + 2
   \   00007D   F0           MOVX    @DPTR,A
    312            data[1] = LO_UINT16( Temp_nwkAddr );
   \   00007E   7401         MOV     A,#0x1
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   E5..         MOV     A,?V0 + 0
   \   000085   F0           MOVX    @DPTR,A
    313            
    314            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    315                                 GET_ENDDEVIC_ADDRES_RESP,
    316                                 2,
    317                                 (uint8*)data,
    318                                 &SampleApp_TransID,
    319                                 AF_DISCV_ROUTE,
    320                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000086                ; Setup parameters for call to function AF_DataRequest
   \   000086   75..1E       MOV     ?V0 + 0,#0x1e
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000091   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   8582..       MOV     ?V0 + 0,DPL
   \   0000A1   8583..       MOV     ?V0 + 1,DPH
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   75..02       MOV     ?V0 + 0,#0x2
   \   0000AC   75..00       MOV     ?V0 + 1,#0x0
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   75..07       MOV     ?V0 + 0,#0x7
   \   0000B7   78..         MOV     R0,#?V0 + 0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   7920         MOV     R1,#0x20
   \   0000BE   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000C0   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000C2   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0000C4   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0000C6   12....       LCALL   ??AF_DataRequest?relay
   \   0000C9   7409         MOV     A,#0x9
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
    321            {
    322            }
    323            else
    324            {
    325              // Error occurred in request to send.
    326            }
    327          }
   \   0000CE   740F         MOV     A,#0xf
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rx:">`:
   \   000000   52783A00     DB "Rx:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Father:">`:
   \   000000   46617468     DB "Father:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "self:%x\\r\\n">`:
   \   000000   73656C66     DB "self:%x\015\012"
   \            3A25780D
   \            0A00    
    328          /*********************************************************************
    329          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0      0
     SampleApp_Init                     0      0      9
       -> MT_UartInit                   0      0     18
       -> MT_UartRegisterTaskID         0      0     18
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> osal_set_event                0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
     SampleApp_Send_P2P_Message         1      0     48
       -> NLME_GetShortAddr             0      0     54
       -> NLME_GetCoordShortAddr        0      0     56
       -> HalLcdWriteStringValue        0      0     56
       -> sprintf                       0      0     58
       -> strlen                        0      0     54
       -> HalUARTWrite                  0      0     54
       -> AF_DataRequest                0      0     72


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     SampleApp_ClusterList                 6
     SampleApp_SimpleDesc                 12
     SampleApp_epDesc                      6
     SampleApp_TaskID                      1
     SampleApp_NwkState                    1
     SampleApp_TransID                     1
     SampleApp_P2P_DstAddr                12
     SampleApp_Init                       92
     SampleApp_ProcessEvent               94
     ?Subroutine0                          5
     SampleApp_HandleKeys                  3
     SampleApp_MessageMSGCB              118
     SampleApp_Send_P2P_Message          214
     ??SampleApp_Init?relay                6
     ??SampleApp_ProcessEvent?relay        6
     ??SampleApp_HandleKeys?relay          6
     ??SampleApp_MessageMSGCB?relay        6
     ??SampleApp_Send_P2P_Message?relay    6
     ?<Constant "Rx:">                     4
     ?<Constant "\n">                      2
     ?<Constant "Father:">                 8
     ?<Constant "self:%x\r\n">            10

 
 526 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  42 bytes in segment XDATA_ROM_C
  21 bytes in segment XDATA_Z
 
 556 bytes of CODE  memory
  42 bytes of CONST memory
  21 bytes of XDATA memory

Errors: none
Warnings: none
