///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        02/Oct/2018  20:23:48 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\Source\vibrnce.c     /
//    Command line       =  -f C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³ /
//                          Ì\Projects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ          /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg (-DSECURE=0            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Des /
//                          ktop\PT100\ÏÂÎ»»ú¹¤³Ì\Projects\zstack\ZIGBEE\ZIGB /
//                          EE\Source\vibrnce.c -D ZIGBEEPRO -D               /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D          /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\EndDeviceEB /
//                          2-Pro\List\ -lA C:\Users\Administrator\Desktop\PT /
//                          100\ÏÂÎ»»ú¹¤³Ì\Projects\zstack\ZIGBEE\ZIGBEE\CC25 /
//                          30DB\EndDeviceEB2-Pro\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\Administrator\Desktop\PT1 /
//                          00\ÏÂÎ»»ú¹¤³Ì\Projects\zstack\ZIGBEE\ZIGBEE\CC253 /
//                          0DB\EndDeviceEB2-Pro\Obj\ -e --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\ -I         /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\SOURCE\  /
//                          -I C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³ /
//                          Ì\Projects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\.. /
//                          \ZMAIN\TI2530DB\ -I C:\Users\Administrator\Deskto /
//                          p\PT100\ÏÂÎ»»ú¹¤³Ì\Projects\zstack\ZIGBEE\ZIGBEE\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I         /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\HAL\INCLUDE\ -I                    /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\HAL\TARGET\CC2530EB\ -I            /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\OSAL\MCU\CCSOC\ -I                 /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\OSAL\INCLUDE\ -I                   /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\AF\ -I                       /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\NWK\ -I                      /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\SEC\ -I                      /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\SAPI\ -I                     /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\SYS\ -I                      /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\ZDO\ -I                      /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\ZMAC\F8W\ -I                       /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\ZMAC\ -I                           /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\SERVICES\SADDR\ -I                 /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\SERVICES\SDATA\ -I                 /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\MAC\INCLUDE\ -I                    /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\MAC\HIGH_LEVEL\ -I                 /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I            /
//                          C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\   /
//                          -Ohz --require_prototypes                         /
//    List file          =  C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\P /
//                          rojects\zstack\ZIGBEE\ZIGBEE\CC2530DB\EndDeviceEB /
//                          2-Pro\List\vibrnce.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME vibrnce

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ADCinital?relay
        FUNCTION ??ADCinital?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_Send_PERIDOIC_CMD?relay
        FUNCTION ??SampleApp_Send_PERIDOIC_CMD?relay,0203H
        PUBLIC ??delayMS?relay
        FUNCTION ??delayMS?relay,0203H
        PUBLIC ??get_vibrance_Message?relay
        FUNCTION ??get_vibrance_Message?relay,0203H
        PUBLIC ADC
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC ADCinital
        FUNCTION ADCinital,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Send_PERIDOIC_CMD
        FUNCTION SampleApp_Send_PERIDOIC_CMD,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_TCON
        PUBWEAK __Constant_3a000000
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_42040000
        PUBWEAK __Constant_43480000
        PUBLIC delayMS
        FUNCTION delayMS,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC get_vibrance_Message
        FUNCTION get_vibrance_Message,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ok
        PUBLIC str_t
        PUBLIC vibrance
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
AF_DataRequest      SYMBOL "AF_DataRequest"
Onboard_wait        SYMBOL "Onboard_wait"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ADCinital           SYMBOL "ADCinital"
??ADCinital?relay   SYMBOL "?relay", ADCinital
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_Send_PERIDOIC_CMD SYMBOL "SampleApp_Send_PERIDOIC_CMD"
??SampleApp_Send_PERIDOIC_CMD?relay SYMBOL "?relay", SampleApp_Send_PERIDOIC_CMD
delayMS             SYMBOL "delayMS"
??delayMS?relay     SYMBOL "?relay", delayMS
get_vibrance_Message SYMBOL "get_vibrance_Message"
??get_vibrance_Message?relay SYMBOL "?relay", get_vibrance_Message

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Users\Administrator\Desktop\PT100\ÏÂÎ»»ú¹¤³Ì\Projects\zstack\ZIGBEE\ZIGBEE\Source\vibrnce.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 **************************************************************************************************/
//    9 
//   10 #include "OSAL.h"
//   11 #include "ZGlobals.h"
//   12 #include "AF.h"
//   13 #include "aps_groups.h"
//   14 #include "ZDApp.h"
//   15 #include <string.h>
//   16 #include <stdio.h>
//   17 #include "SampleApp.h"
//   18 #include "SampleAppHw.h"
//   19 
//   20 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   21 
//   22 /* HAL */
//   23 #include "hal_lcd.h"
//   24 #include "hal_led.h"
//   25 #include "hal_key.h"
//   26 #include "MT_UART.h"
//   27 #include "MT_APP.h"
//   28 #include "MT.h"
//   29 #include "math.h"
//   30 
//   31 
//   32 
//   33 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   34 const cId_t SampleApp_ClusterList[ENDDEVICE_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DW 1
//   35 {
//   36   ENDDEVIC1_MSG //Modified by user,Çø·ÖÃ¿¸öÖÕ¶ËµÄ´ØÁÐ±í£¬µÚx¸öÖÕ¶Ë£¬Ôò¸ü¸ÄÎªENDDEVICx_MSG
//   37 }; 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   38 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW SampleApp_ClusterList
//   39 {
//   40   SAMPLEAPP_ENDPOINT,             
//   41   SAMPLEAPP_PROFID,              
//   42   SAMPLEAPP_DEVICEID,             
//   43   SAMPLEAPP_FLAGS,                
//   44   SAMPLEAPP_DEVICE_VERSION,       
//   45   ENDDEVICE_MAX_CLUSTERS,          
//   46   (cId_t *)SampleApp_ClusterList,  
//   47   ENDDEVICE_MAX_CLUSTERS,         
//   48   (cId_t *)SampleApp_ClusterList   
//   49 };
//   50 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   52 
//   53 
//   54 /*********************************************************************
//   55  * LOCAL VARIABLES
//   56  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   57 uint8 SampleApp_TaskID;  
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   58                           

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   59 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   60 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   61 uint8 SampleApp_TransID;  
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   62 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   63 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥µØÖ·£¬¼´ÖÕ¶ËÏòÐ­µ÷Æ÷·¢ËÍÊý¾ÝµØÖ·
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   64 uint8 ok;
ok:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   65 float  ADC;
ADC:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   66 uint8 vibrance;
vibrance:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   67 uint8 str_t[4];
str_t:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   68 /*********************************************************************
//   69  * LOCAL FUNCTIONS
//   70  */
//   71 void spi_master(void);
//   72 uint8 SampleApp_Send_PERIDOIC_CMD(void);     //¶¨Ê±´®¿Ú·¢ËÍº¯Êý
//   73 void ADCinital(void);
//   74 int get_vibrance_Message(void);
//   75 void delayMS(unsigned int ms);
//   76 /*********************************************************************
//   77  * @fn      SampleApp_Init
//   78  *
//   79  * @brief   Initialization function for the Generic App Task.
//   80  *          This is called during initialization and should contain
//   81  *          any application specific initialization (ie. hardware
//   82  *          initialization/setup, table initialization, power up
//   83  *          notificaiton ... ).
//   84  *
//   85  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   86  *                    used to send messages and set timers.
//   87  *
//   88  * @return  none
//   89  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   90 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//   91 { 
        FUNCALL SampleApp_Init, ADCinital
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   92   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//   93   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   94   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//   95  
//   96   ADCinital();
        ; Setup parameters for call to function ADCinital
        LCALL   ??ADCinital?relay
//   97   osal_start_timerEx( SampleApp_TaskID, PERIDOIC_CMD, PERIODIC_CMD_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//   98   
//   99   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥µØÖ·³õÊ¼»¯
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  100   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  101   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷£¬Ð­µ÷Æ÷µØÖ·¹Ì¶¨Îª0X0000£¬Òò´ËÎÞÐè¸Ä¶¯
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  102 
//  103 
//  104   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  105   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  106   SampleApp_epDesc.simpleDesc
//  107             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  108   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  109  
//  110   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  111  
//  112   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
        CFI EndBlock cfiBlock0
//  113 
//  114   
//  115 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  116 
//  117 /*********************************************************************
//  118  * @fn      SampleApp_ProcessEvent
//  119  *
//  120  * @brief   Generic Application Task event processor.  This function
//  121  *          is called to process all events for the task.  Events
//  122  *          include timers, messages and any other user defined events.
//  123  *
//  124  * @param   task_id  - The OSAL assigned task ID.
//  125  * @param   events - events to process.  This is a bit map and can
//  126  *                   contain more than one event.
//  127  *
//  128  * @return  none  osal_start_timerEx( SampleApp_TaskID, PERIDOIC_CMD, PERIODIC_CMD_TIME );
//  129  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  130 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  131 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_PERIDOIC_CMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  132   afIncomingMSGPacket_t *MSGpkt;
//  133   (void)task_id;  // Intentionally unreferenced parameter
//  134 
//  135   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  136   {
//  137     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  138     while ( MSGpkt )
//  139     {
//  140       switch ( MSGpkt->hdr.event )
??SampleApp_ProcessEvent_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??SampleApp_ProcessEvent_3
//  141       {
//  142         // Received when a key is pressed
//  143         case KEY_CHANGE:
//  144          
//  145           break;
//  146 
//  147         // Received when a messages is received (OTA) for this endpoint
//  148         case AF_INCOMING_MSG_CMD:
//  149           
//  150           break;
//  151 
//  152         // Received whenever the device changes state in the network
//  153         case ZDO_STATE_CHANGE:
//  154           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  155           if( 1 )
//  156           {
//  157            //Ö»ÓÐÖÕ¶ËÉè±¸¿ªÆô£¬2ÃëÎÂ¶È»»ËãÈÎÎñ
//  158           // osal_start_timerEx( SampleApp_TaskID, PERIDOIC_CMD, PERIODIC_CMD_TIME );
//  159           }
//  160         
//  161           break;
//  162 
//  163         default:
//  164           break;
//  165       }
//  166 
//  167       // Release the memory
//  168       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  169 
//  170       // Next - if one is available
//  171       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
//  172     }
        MOV     A,R2
        ORL     A,R3
        JNZ     ??SampleApp_ProcessEvent_2
//  173 
//  174     // return unprocessed events
//  175     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_4
//  176   }
//  177 
//  178   if ( events & PERIDOIC_CMD )//2S¶¨Ê±Ê±¼äµ½£¬µ÷ÓÃº¯ÊýSampleApp_Send_PERIDOIC_CMD¼ÆËãÎÂ¶ÈÖµ
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_5
//  179     {
//  180       SampleApp_Send_PERIDOIC_CMD();
        ; Setup parameters for call to function SampleApp_Send_PERIDOIC_CMD
        LCALL   ??SampleApp_Send_PERIDOIC_CMD?relay
//  181       osal_start_timerEx( SampleApp_TaskID, PERIDOIC_CMD, PERIODIC_CMD_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  182    //Æô¶¯¶¨Ê±ÊÂ¼þ£¬ÖÜÆÚÎªPERIODIC_CMD_TIME
//  183     }
//  184   return 0;
??SampleApp_ProcessEvent_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??SampleApp_ProcessEvent_4:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  185 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  186 
//  187  
//  188 /*********************************************************************
//  189 *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 uint8 SampleApp_Send_PERIDOIC_CMD(void)//¼ÆËãÎÂ¶ÈÖµ
SampleApp_Send_PERIDOIC_CMD:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_Send_PERIDOIC_CMD
        CODE
//  191 {
        FUNCALL SampleApp_Send_PERIDOIC_CMD, get_vibrance_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_PERIDOIC_CMD, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  192   if(1)            
//  193     {                                   
//  194              get_vibrance_Message();
        ; Setup parameters for call to function get_vibrance_Message
        LCALL   ??get_vibrance_Message?relay
//  195              str_t[0] = 3;//ÖÕ¶Ë3Õñ¶¯±àºÅ
        MOV     DPTR,#str_t
        MOV     A,#0x3
        MOVX    @DPTR,A
//  196              str_t[1] = (uint8)vibrance;   
        MOV     DPTR,#vibrance
        MOVX    A,@DPTR
        MOV     DPTR,#str_t + 1
        MOVX    @DPTR,A
//  197              if(vibrance >= 35)
        CLR     C
        SUBB    A,#0x23
        MOV     DPTR,#str_t + 2
        JC      ??SampleApp_Send_PERIDOIC_CMD_0
//  198              {
//  199                str_t[2] = 1;
        MOV     A,#0x1
        SJMP    ??SampleApp_Send_PERIDOIC_CMD_1
//  200              } 
//  201              else 
//  202              {
//  203                str_t[2] = 0;              
??SampleApp_Send_PERIDOIC_CMD_0:
        CLR     A
??SampleApp_Send_PERIDOIC_CMD_1:
        MOVX    @DPTR,A
//  204              }
//  205 
//  206              //sprintf(&str_t[2], "%3.2f", RTD_Temperature);//½«ÎÂ¶È¸¡µãÊý×ª»¯Îª¶ÔÓ¦×Ö·û´®
//  207              
//  208              AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,//ÎÞÏß·¢ËÍÐÅÏ¢µ½Ð­µ÷Æ÷
//  209                                  ENDDEVIC1_MSG, 
//  210                                  3,            //·¢ËÍÊý¾Ý³¤¶È,¸ù¾ÝÓÃ»§Êý¾Ý³¤¶È¸Ä±ä
//  211                                  str_t,
//  212                                  &SampleApp_TransID,
//  213                                  AF_DISCV_ROUTE,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#str_t & 0xff
        MOV     ?V0 + 1,#(str_t >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  214  
//  215     }
//  216    return 0;  
        MOV     R1,#0x0
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock4
//  217 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void ADCinital(void)
ADCinital:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ADCinital
        CODE
//  219 {
        ; Saved register size: 0
        ; Auto size: 0
//  220   ADCH&=0X00;//ÇåEOC±êÖ¾
        MOV     A,0xbb
        MOV     0xbb,#0x0
//  221   P0DIR &= ~0x40;
        ANL     0xfd,#0xbf
//  222   //½« P1.1 ¶¨ÒåÎªÍâÉè¹¦ÄÜ
//  223   P0SEL |= 0x40;
        ORL     0xf3,#0x40
//  224   ADCCON3=0XB6;//µ¥´Î×ª»»£¬²Î¿¼µçÑ¹ÎªµçÔ´µçÑ¹£¬¶ÔP0.6²ÉÑù£¬¾«¶È12Î»            
        MOV     0xb6,#-0x4a
//  225   ADCCON1=0X30;//Í£Ö¹AD
        MOV     0xb4,#0x30
//  226   ADCCON1|=0X40;//¿ªÊ¼AD
        ORL     0xb4,#0x40
//  227 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
        REQUIRE ADCH
        REQUIRE P0DIR
        REQUIRE P0SEL
        REQUIRE ADCCON3
        REQUIRE ADCCON1

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  228 int get_vibrance_Message()
get_vibrance_Message:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function get_vibrance_Message
        CODE
//  229 {
        FUNCALL get_vibrance_Message, ADCinital
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  230  
//  231   unsigned short  NUM;
//  232   
//  233    while ( !ADCIF ) ;
??get_vibrance_Message_0:
        MOV     C,0x88.5
        JNC     ??get_vibrance_Message_0
//  234         
//  235    NUM = ADCL;
        MOV     A,0xba
        MOV     ?V0 + 0,A
//  236    NUM |= ((uint16)ADCH) << 8 ;//ÕâÀï×¢ÒâÒ»ÏÂ
//  237    NUM >>= 4;
        MOV     A,0xbb
        MOV     R1,A
        MOV     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,R1
        MOV     ?V0 + 3,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  238   
//  239   ADCinital();
        ; Setup parameters for call to function ADCinital
        LCALL   ??ADCinital?relay
//  240   if (NUM&0x8000) NUM=0;
//  241   if (NUM>4000) NUM=0;
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#-0x5f
        MOV     A,?V0 + 1
        SUBB    A,#0xf
        JC      ??get_vibrance_Message_1
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  242   ADC=(float)((float)NUM*3.30/2048);  
??get_vibrance_Message_1:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_3a000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  243   vibrance = ADC*10/33*200;
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_42040000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_43480000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     DPTR,#vibrance
        MOVX    @DPTR,A
//  244   if(vibrance >=10) vibrance = vibrance-10;
        CLR     C
        SUBB    A,#0xa
        MOVX    A,@DPTR
        JC      ??get_vibrance_Message_2
        ADD     A,#-0xa
        SJMP    ??get_vibrance_Message_3
//  245     else if(vibrance >=7) vibrance = vibrance-7;
??get_vibrance_Message_2:
        CLR     C
        SUBB    A,#0x7
        MOVX    A,@DPTR
        JC      ??get_vibrance_Message_4
        ADD     A,#-0x7
        SJMP    ??get_vibrance_Message_3
//  246          else if(vibrance >=5) vibrance = vibrance-5;
??get_vibrance_Message_4:
        CLR     C
        SUBB    A,#0x5
        MOVX    A,@DPTR
        JC      ??get_vibrance_Message_5
        ADD     A,#-0x5
        SJMP    ??get_vibrance_Message_3
//  247             else if(vibrance >=2) vibrance = vibrance-2;
??get_vibrance_Message_5:
        CLR     C
        SUBB    A,#0x2
        JC      ??get_vibrance_Message_6
        MOVX    A,@DPTR
        ADD     A,#-0x2
??get_vibrance_Message_3:
        MOVX    @DPTR,A
//  248 
//  249 }
??get_vibrance_Message_6:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
        REQUIRE _A_TCON
        REQUIRE ADCL
        REQUIRE ADCH

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  250 void delayMS(unsigned int ms)
delayMS:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function delayMS
        CODE
//  251 {
        FUNCALL delayMS, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??delayMS_0
//  252   unsigned int i;
//  253   while(ms != 0)
//  254   {  
//  255    MicroWait(1000);  
??delayMS_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Onboard_wait?relay
//  256     ms--;  
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
??delayMS_0:
        MOV     R7,A
//  257   }     
        MOV     A,R6
        ORL     A,R7
        JNZ     ??delayMS_1
//  258 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a000000:
        DD 3A000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41200000:
        DD 41200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42040000:
        DD 42040000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_43480000:
        DD 43480000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_PERIDOIC_CMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_PERIDOIC_CMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADCinital?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADCinital

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_vibrance_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_vibrance_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delayMS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delayMS

        END
// 
// 562 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   7 bytes in segment SFR_AN
//  34 bytes in segment XDATA_ROM_C
//  31 bytes in segment XDATA_Z
// 
// 598 bytes of CODE  memory
//  14 bytes of CONST memory (+ 20 bytes shared)
//   0 bytes of DATA  memory (+  7 bytes shared)
//  31 bytes of XDATA memory
//
//Errors: none
//Warnings: 3
